generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  firstName     String
  lastName      String
  email         String         @unique
  password      String
  dateOfBirth   String
  gender        String
  country       String
  weight        String?
  height        String?
  city          String?
  profileImage  String?
  refreshTokens RefreshToken[]
  workouts      Workout[]
  meals         Meal[]
  goals         Goal[]
  progress      Progress[]
  Water         Water[]
  WaterGoal     WaterGoal[]
  posts         Post[]
  comments      Comment[]
}

model RefreshToken {
  id     String @id @default(uuid())
  token  String @unique @db.VarChar(400)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workout {
  id       String @id @default(uuid())
  date     String
  type     String
  duration Int?
  calories Int
  userId   String
  speed    Int?
  effort   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meal {
  id            String  @id @default(uuid())
  userId        String
  name          String
  date          String
  category      String
  totalCalories Int
  totalProtein  Int
  totalCarbs    Int
  totalFats     Int
  foods         String?
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id              String        @id @default(uuid())
  description     String
  targetDate      String
  achieved        Boolean       @default(false)
  targetCalories  Int
  currentCalories Int           @default(0)
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievements    Achievement[]
}

model Achievement {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  goalId      String
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model Progress {
  id         String   @id @default(uuid())
  date       DateTime
  weight     Float?
  bodyFat    Float?
  muscleMass Float?
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Water {
  id     String @id @default(uuid())
  amount Int
  date   String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WaterGoal {
  id                String  @id @default(uuid())
  target            Int
  achieved          Boolean @default(false)
  currentWaterAmout Int?    @default(0)
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String    @db.Text
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  postTags  String?
  image     String?
  category  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
